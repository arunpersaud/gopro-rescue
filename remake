#!/usr/bin/python3

"""
Usage: remake [-i|--invert] <clusterfile>

Options:
  -i --invert   invert all numbers in clusterfile
"""
from docopt import docopt
import json
import sys

commands = docopt(__doc__)

clusterfile = commands['<clusterfile>']

with open(clusterfile, 'r') as f:
    data = json.load(f)

imagefile = data['image']
start = data['start']
stop = data['stop']
header2 = data['header2']
used = data['used']

cluster_size = 256*512

with open(imagefile, 'rb') as f:
    f.seek(cluster_size*start)
    mybytes = f.read((stop-start)*cluster_size)


outfile = 'reconstructed01-new.LRV'
if commands['--invert']:
    used = [-x for x in used]
    outfile = 'reconstructed01-new.MP4'


mdat1 = int.from_bytes(mybytes[20:24], byteorder='big') // cluster_size
mdat2 = int.from_bytes(mybytes[header2*cluster_size+20:header2
                               * cluster_size+24], byteorder='big') // cluster_size


def make_video(used):
    c = 0
    in_moov = False
    assert 1 in used, 'header is missing'
    assert 2 in used, 'moov is missing'
    assert 3 in used, 'blocks are missing'
    with open(outfile, 'wb') as out2:
        for i, k in enumerate(used):
            if k != 2 and in_moov:
                break
            if k in [1, 3]:
                out2.write(mybytes[i*cluster_size:(i+1)*cluster_size])
                c += 1
            if k == 2:
                in_moov = True
                for j in range(mdat2-c):
                    print('padded with zeros')
                    out2.write(zero_cluster)
                out2.write(mybytes[i*cluster_size:(i+2)*cluster_size])
    return c


make_video(used)

with open(outfile, 'rb') as f:
    f.read(20)
    mybytes = f.read(4)
    mdat_length = int.from_bytes(mybytes, byteorder='big')
    print('mdat length:', mdat_length)
    f.seek(mdat_length-4, 1)
    mybytes = f.read(4)
    moov_length = int.from_bytes(mybytes, byteorder='big')
    print('moov lengths', moov_length)

total = 20 + mdat_length + moov_length
print('file size', total, total/cluster_size)

with open(outfile, 'rb') as f:
    mybytes = f.read()

with open(outfile, 'wb') as f:
    f.write(mybytes[:total])
